{"version":3,"file":"lint.es-73b95e15.js","sources":["../../node_modules/@graphiql/react/dist/lint.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport { specifiedRules, NoUnusedFragmentsRule, ExecutableDefinitionsRule, KnownFragmentNamesRule, validate, Kind, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, print, parse, GraphQLError, NoDeprecatedCustomRule } from \"graphql\";\nimport { C as CharacterStream, o as onlineParser } from \"./index.es.js\";\nimport { R as Range, P as Position } from \"./Range.es.js\";\nimport \"react\";\nimport \"react-dom\";\nconst specifiedSDLRules = [\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule\n];\nfunction validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n  const rules = specifiedRules.filter((rule) => {\n    if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n      return false;\n    }\n    if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n      return false;\n    }\n    return true;\n  });\n  if (customRules) {\n    Array.prototype.push.apply(rules, customRules);\n  }\n  if (isSchemaDocument) {\n    Array.prototype.push.apply(rules, specifiedSDLRules);\n  }\n  const errors = validate(schema, ast, rules);\n  return errors.filter((error) => {\n    if (error.message.includes(\"Unknown directive\") && error.nodes) {\n      const node = error.nodes[0];\n      if (node && node.kind === Kind.DIRECTIVE) {\n        const name = node.name.value;\n        if (name === \"arguments\" || name === \"argumentDefinitions\") {\n          return false;\n        }\n      }\n    }\n    return true;\n  });\n}\n__name(validateWithCustomRules, \"validateWithCustomRules\");\nconst SEVERITY$1 = {\n  Error: \"Error\",\n  Warning: \"Warning\",\n  Information: \"Information\",\n  Hint: \"Hint\"\n};\nconst DIAGNOSTIC_SEVERITY = {\n  [SEVERITY$1.Error]: 1,\n  [SEVERITY$1.Warning]: 2,\n  [SEVERITY$1.Information]: 3,\n  [SEVERITY$1.Hint]: 4\n};\nconst invariant = /* @__PURE__ */ __name((condition, message) => {\n  if (!condition) {\n    throw new Error(message);\n  }\n}, \"invariant\");\nfunction getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n  var _a, _b;\n  let ast = null;\n  let fragments = \"\";\n  if (externalFragments) {\n    fragments = typeof externalFragments === \"string\" ? externalFragments : externalFragments.reduce((acc, node) => acc + print(node) + \"\\n\\n\", \"\");\n  }\n  const enhancedQuery = fragments ? `${query}\n\n${fragments}` : query;\n  try {\n    ast = parse(enhancedQuery);\n  } catch (error) {\n    if (error instanceof GraphQLError) {\n      const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n      return [\n        {\n          severity: DIAGNOSTIC_SEVERITY.Error,\n          message: error.message,\n          source: \"GraphQL: Syntax\",\n          range\n        }\n      ];\n    }\n    throw error;\n  }\n  return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\n__name(getDiagnostics, \"getDiagnostics\");\nfunction validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n  if (!schema) {\n    return [];\n  }\n  const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap((error) => annotations(error, DIAGNOSTIC_SEVERITY.Error, \"Validation\"));\n  const deprecationWarningAnnotations = validate(schema, ast, [\n    NoDeprecatedCustomRule\n  ]).flatMap((error) => annotations(error, DIAGNOSTIC_SEVERITY.Warning, \"Deprecation\"));\n  return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\n__name(validateQuery, \"validateQuery\");\nfunction annotations(error, severity, type) {\n  if (!error.nodes) {\n    return [];\n  }\n  const highlightedNodes = [];\n  error.nodes.forEach((node, i) => {\n    const highlightNode = node.kind !== \"Variable\" && \"name\" in node && node.name !== void 0 ? node.name : \"variable\" in node && node.variable !== void 0 ? node.variable : node;\n    if (highlightNode) {\n      invariant(error.locations, \"GraphQL validation error requires locations.\");\n      const loc = error.locations[i];\n      const highlightLoc = getLocation(highlightNode);\n      const end = loc.column + (highlightLoc.end - highlightLoc.start);\n      highlightedNodes.push({\n        source: `GraphQL: ${type}`,\n        message: error.message,\n        severity,\n        range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end))\n      });\n    }\n  });\n  return highlightedNodes;\n}\n__name(annotations, \"annotations\");\nfunction getRange(location, queryText) {\n  const parser = onlineParser();\n  const state = parser.startState();\n  const lines = queryText.split(\"\\n\");\n  invariant(lines.length >= location.line, \"Query text must have more lines than where the error happened\");\n  let stream = null;\n  for (let i = 0; i < location.line; i++) {\n    stream = new CharacterStream(lines[i]);\n    while (!stream.eol()) {\n      const style = parser.token(stream, state);\n      if (style === \"invalidchar\") {\n        break;\n      }\n    }\n  }\n  invariant(stream, \"Expected Parser stream to be available.\");\n  const line = location.line - 1;\n  const start = stream.getStartOfToken();\n  const end = stream.getCurrentPosition();\n  return new Range(new Position(line, start), new Position(line, end));\n}\n__name(getRange, \"getRange\");\nfunction getLocation(node) {\n  const typeCastedNode = node;\n  const location = typeCastedNode.loc;\n  invariant(location, \"Expected ASTNode to have a location.\");\n  return location;\n}\n__name(getLocation, \"getLocation\");\nconst SEVERITY = [\"error\", \"warning\", \"information\", \"hint\"];\nconst TYPE = {\n  \"GraphQL: Validation\": \"validation\",\n  \"GraphQL: Deprecation\": \"deprecation\",\n  \"GraphQL: Syntax\": \"syntax\"\n};\nCodeMirror.registerHelper(\"lint\", \"graphql\", (text, options) => {\n  const { schema, validationRules, externalFragments } = options;\n  const rawResults = getDiagnostics(text, schema, validationRules, void 0, externalFragments);\n  const results = rawResults.map((error) => ({\n    message: error.message,\n    severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n    type: error.source ? TYPE[error.source] : void 0,\n    from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n    to: CodeMirror.Pos(error.range.end.line, error.range.end.character)\n  }));\n  return results;\n});\n"],"names":["__defProp","__name","target","value","specifiedSDLRules","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","KnownTypeNamesRule","KnownDirectivesRule","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","UniqueArgumentNamesRule","UniqueInputFieldNamesRule","validateWithCustomRules","schema","ast","customRules","isRelayCompatMode","isSchemaDocument","rules","specifiedRules","rule","NoUnusedFragmentsRule","ExecutableDefinitionsRule","KnownFragmentNamesRule","validate","error","node","Kind","name","SEVERITY$1","DIAGNOSTIC_SEVERITY","invariant","condition","message","getDiagnostics","query","externalFragments","_a","_b","fragments","acc","print","enhancedQuery","parse","GraphQLError","range","getRange","validateQuery","validationErrorAnnotations","annotations","deprecationWarningAnnotations","NoDeprecatedCustomRule","severity","type","highlightedNodes","i","highlightNode","loc","highlightLoc","getLocation","end","Range","Position","location","queryText","parser","onlineParser","state","lines","stream","CharacterStream","line","start","SEVERITY","TYPE","CodeMirror","text","options","validationRules"],"mappings":"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","x_google_ignoreList":[0]}