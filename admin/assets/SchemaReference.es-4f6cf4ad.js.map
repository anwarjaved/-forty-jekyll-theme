{"version":3,"file":"SchemaReference.es-4f6cf4ad.js","sources":["../../node_modules/@graphiql/react/dist/SchemaReference.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { getNamedType, GraphQLInputObjectType, getNullableType, GraphQLList, GraphQLEnumType, isCompositeType } from \"graphql\";\nimport { S as SchemaMetaFieldDef, T as TypeMetaFieldDef, a as TypeNameMetaFieldDef } from \"./index.es.js\";\nimport { f as forEachState } from \"./forEachState.es.js\";\nfunction getTypeInfo(schema, tokenState) {\n  const info = {\n    schema,\n    type: null,\n    parentType: null,\n    inputType: null,\n    directiveDef: null,\n    fieldDef: null,\n    argDef: null,\n    argDefs: null,\n    objectFieldDefs: null\n  };\n  forEachState(tokenState, (state) => {\n    var _a, _b;\n    switch (state.kind) {\n      case \"Query\":\n      case \"ShortQuery\":\n        info.type = schema.getQueryType();\n        break;\n      case \"Mutation\":\n        info.type = schema.getMutationType();\n        break;\n      case \"Subscription\":\n        info.type = schema.getSubscriptionType();\n        break;\n      case \"InlineFragment\":\n      case \"FragmentDefinition\":\n        if (state.type) {\n          info.type = schema.getType(state.type);\n        }\n        break;\n      case \"Field\":\n      case \"AliasedField\":\n        info.fieldDef = info.type && state.name ? getFieldDef(schema, info.parentType, state.name) : null;\n        info.type = (_a = info.fieldDef) === null || _a === void 0 ? void 0 : _a.type;\n        break;\n      case \"SelectionSet\":\n        info.parentType = info.type ? getNamedType(info.type) : null;\n        break;\n      case \"Directive\":\n        info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n        break;\n      case \"Arguments\":\n        const parentDef = state.prevState ? state.prevState.kind === \"Field\" ? info.fieldDef : state.prevState.kind === \"Directive\" ? info.directiveDef : state.prevState.kind === \"AliasedField\" ? state.prevState.name && getFieldDef(schema, info.parentType, state.prevState.name) : null : null;\n        info.argDefs = parentDef ? parentDef.args : null;\n        break;\n      case \"Argument\":\n        info.argDef = null;\n        if (info.argDefs) {\n          for (let i = 0; i < info.argDefs.length; i++) {\n            if (info.argDefs[i].name === state.name) {\n              info.argDef = info.argDefs[i];\n              break;\n            }\n          }\n        }\n        info.inputType = (_b = info.argDef) === null || _b === void 0 ? void 0 : _b.type;\n        break;\n      case \"EnumValue\":\n        const enumType = info.inputType ? getNamedType(info.inputType) : null;\n        info.enumValue = enumType instanceof GraphQLEnumType ? find(enumType.getValues(), (val) => val.value === state.name) : null;\n        break;\n      case \"ListValue\":\n        const nullableType = info.inputType ? getNullableType(info.inputType) : null;\n        info.inputType = nullableType instanceof GraphQLList ? nullableType.ofType : null;\n        break;\n      case \"ObjectValue\":\n        const objectType = info.inputType ? getNamedType(info.inputType) : null;\n        info.objectFieldDefs = objectType instanceof GraphQLInputObjectType ? objectType.getFields() : null;\n        break;\n      case \"ObjectField\":\n        const objectField = state.name && info.objectFieldDefs ? info.objectFieldDefs[state.name] : null;\n        info.inputType = objectField === null || objectField === void 0 ? void 0 : objectField.type;\n        break;\n      case \"NamedType\":\n        info.type = state.name ? schema.getType(state.name) : null;\n        break;\n    }\n  });\n  return info;\n}\n__name(getTypeInfo, \"getTypeInfo\");\nfunction getFieldDef(schema, type, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n    return SchemaMetaFieldDef;\n  }\n  if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === type) {\n    return TypeMetaFieldDef;\n  }\n  if (fieldName === TypeNameMetaFieldDef.name && isCompositeType(type)) {\n    return TypeNameMetaFieldDef;\n  }\n  if (type && type.getFields) {\n    return type.getFields()[fieldName];\n  }\n}\n__name(getFieldDef, \"getFieldDef\");\nfunction find(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n}\n__name(find, \"find\");\nfunction getFieldReference(typeInfo) {\n  return {\n    kind: \"Field\",\n    schema: typeInfo.schema,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n__name(getFieldReference, \"getFieldReference\");\nfunction getDirectiveReference(typeInfo) {\n  return {\n    kind: \"Directive\",\n    schema: typeInfo.schema,\n    directive: typeInfo.directiveDef\n  };\n}\n__name(getDirectiveReference, \"getDirectiveReference\");\nfunction getArgumentReference(typeInfo) {\n  return typeInfo.directiveDef ? {\n    kind: \"Argument\",\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    directive: typeInfo.directiveDef\n  } : {\n    kind: \"Argument\",\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n__name(getArgumentReference, \"getArgumentReference\");\nfunction getEnumValueReference(typeInfo) {\n  return {\n    kind: \"EnumValue\",\n    value: typeInfo.enumValue || void 0,\n    type: typeInfo.inputType ? getNamedType(typeInfo.inputType) : void 0\n  };\n}\n__name(getEnumValueReference, \"getEnumValueReference\");\nfunction getTypeReference(typeInfo, type) {\n  return {\n    kind: \"Type\",\n    schema: typeInfo.schema,\n    type: type || typeInfo.type\n  };\n}\n__name(getTypeReference, \"getTypeReference\");\nfunction isMetaField(fieldDef) {\n  return fieldDef.name.slice(0, 2) === \"__\";\n}\n__name(isMetaField, \"isMetaField\");\nexport { getFieldReference as a, getDirectiveReference as b, getArgumentReference as c, getEnumValueReference as d, getTypeReference as e, getTypeInfo as g };\n"],"names":["__defProp","__name","target","value","getTypeInfo","schema","tokenState","info","forEachState","state","_a","_b","getFieldDef","getNamedType","parentDef","i","enumType","GraphQLEnumType","find","val","nullableType","getNullableType","GraphQLList","objectType","GraphQLInputObjectType","objectField","type","fieldName","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isCompositeType","array","predicate","getFieldReference","typeInfo","isMetaField","getDirectiveReference","getArgumentReference","getEnumValueReference","getTypeReference","fieldDef"],"mappings":"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","x_google_ignoreList":[0]}